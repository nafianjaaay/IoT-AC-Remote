#define BLYNK_TEMPLATE_ID "RAHASIA"
#define BLYNK_TEMPLATE_NAME "AcProjectTX"
#define BLYNK_AUTH_TOKEN "RAHASIA"

char auth[] = BLYNK_AUTH_TOKEN;

#include <WiFi.h>
#include <WiFiClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <BlynkSimpleEsp32.h>
#include <Firebase_ESP_Client.h>

// Include the Token Helper and RTDB Helper
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define trigSensor1 32 
#define echoSensor1 33  
#define trigSensor2 18
#define echoSensor2 19
#define LED_PIN 17
#define BUZZER_PIN 16

// WIFI UNTUK ESP32
const char ssid[] = "Napstore Electronics";
const char pass[] = "RAHASIA";

#define API_KEY "RAHASIA"
#define DATABASE_URL "RAHASIA"

// Inisialisasi objek Firebase
FirebaseData fbdo;
FirebaseAuth authFirebase;
FirebaseConfig configFirebase;

unsigned long previousMillis = 0;
unsigned long interval = 30000;

#define BLYNK_PRINT Serial
BlynkTimer timer;

#define INTERVAL 1000L

LiquidCrystal_I2C lcd(0x27, 16, 2); // Alamat I2C biasanya 0x27 atau 0x3F

long durasi1, durasi2;
float cm1, cm2;
int SENSOR1_STATE, SENSOR2_STATE;
static int JUMLAH_ORANG = 0;

unsigned long sensor1Timer = 0;
unsigned long sensor2Timer = 0;
unsigned long lastUpdateTime = 0;
const unsigned long timeout = 3000;
const unsigned long updateInterval = 3000;

bool statusMasuk = false;
bool statusKeluar = false;
unsigned long sendDataPrevMillis = 0; // Deklarasi variabel untuk pengiriman data Firebase

void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, pass);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

void setup()
{
  Serial.begin(9600);
  Serial.println("esp32 serial initialize");

  pinMode(trigSensor1, OUTPUT);
  pinMode(echoSensor1, INPUT);
  pinMode(trigSensor2, OUTPUT);
  pinMode(echoSensor2, INPUT);
  
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  Blynk.begin(auth, ssid, pass);
  
  initWiFi();
  Serial.print("RSSI: ");
  Serial.println(WiFi.RSSI());
    
  lcd.begin();
  lcd.backlight();
  lcd.clear();

  // Setup Firebase
  configFirebase.api_key = API_KEY;
  configFirebase.database_url = DATABASE_URL;

  if (Firebase.signUp(&configFirebase, &authFirebase, "", "")) {
    Serial.println("Firebase Signup Successful");
  } else {
    Serial.printf("Firebase Signup Failed: %s\n", configFirebase.signer.signupError.message.c_str());
  }

  Firebase.begin(&configFirebase, &authFirebase);
  Firebase.reconnectWiFi(true);

  timer.setInterval(INTERVAL, sendToBlynk);

}

void loop()
{
    unsigned long currentMillis = millis();
  // if WiFi is down, try reconnecting every CHECK_WIFI_TIME seconds
  if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >=interval)) {
    Serial.print(millis());
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    WiFi.reconnect();
    previousMillis = currentMillis;
  }
  
  Blynk.run();
  timer.run();
  // Membaca SENSOR1 (di luar ruangan)
  digitalWrite(trigSensor1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigSensor1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigSensor1, LOW);
  
  durasi1 = pulseIn(echoSensor1, HIGH);
  cm1 = (durasi1 * 0.0343) / 2;

  if (cm1 < 50.0) {
    SENSOR1_STATE = HIGH;
  } else {
    SENSOR1_STATE = LOW;
  }

  // Membaca SENSOR2 (di dalam ruangan)
  digitalWrite(trigSensor2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigSensor2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigSensor2, LOW);
  
  durasi2 = pulseIn(echoSensor2, HIGH);
  cm2 = (durasi2 * 0.0343) / 2;

  if (cm2 < 50.0) {
    SENSOR2_STATE = HIGH;
  } else {
    SENSOR2_STATE = LOW;
  }

  if (SENSOR1_STATE == HIGH && !statusMasuk && !statusKeluar) {
    statusMasuk = true;
    sensor1Timer = millis();
  }
  if (statusMasuk && SENSOR2_STATE == HIGH) {
    if (millis() - sensor1Timer <= timeout && millis() - lastUpdateTime > updateInterval) {
      JUMLAH_ORANG++;
      lastUpdateTime = millis();
      Serial.println("Seseorang masuk");
      triggerEntryAlert();
    }
    statusMasuk = false;
  }
  if (statusMasuk && millis() - sensor1Timer > timeout) {
    statusMasuk = false;
  }

  if (SENSOR2_STATE == HIGH && !statusKeluar && !statusMasuk) {
    statusKeluar = true;
    sensor2Timer = millis();
  }
  if (statusKeluar && SENSOR1_STATE == HIGH) {
    if (millis() - sensor2Timer <= timeout && millis() - lastUpdateTime > updateInterval) {
      JUMLAH_ORANG--;
      lastUpdateTime = millis();
      Serial.println("Seseorang keluar");
      triggerExitAlert();
    }
    statusKeluar = false;
  }
  if (statusKeluar && millis() - sensor2Timer > timeout) {
    statusKeluar = false;
  }

  if (JUMLAH_ORANG == 9) {
    JUMLAH_ORANG = 8;
  }
  if (JUMLAH_ORANG == -1) {
    JUMLAH_ORANG = 0;
  }

  Serial.print("JUMLAH_ORANG: ");
  Serial.println(JUMLAH_ORANG);

  updateLCD(); // Update display LCD

    // Kirim data ke Firebase setiap 30 detik
  if (Firebase.ready() && (millis() - sendDataPrevMillis > 30000 || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    sendToFirebase();
  }

  delay(50);
}

// Fungsi untuk menampilkan data pada LCD
void updateLCD() {
  lcd.setCursor(0, 0);
  lcd.print("JUMLAH ORANG: ");
  lcd.print(JUMLAH_ORANG);

  lcd.setCursor(0, 1);
  lcd.print("S1:");
  lcd.print(SENSOR1_STATE);
  lcd.print(" | S2:");
  lcd.print(SENSOR2_STATE);
}

// Fungsi untuk menyalakan LED dan buzzer ketika seseorang masuk
void triggerEntryAlert() {
  digitalWrite(LED_PIN, HIGH);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(2000); // LED dan buzzer menyala selama 2 detik
  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
}

// Fungsi untuk menyalakan LED dan buzzer ketika seseorang keluar
void triggerExitAlert() {
  digitalWrite(LED_PIN, HIGH);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(1000); // LED dan buzzer menyala selama 1 detik
  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  delay(1000); // LED dan buzzer mati selama 1 detik
  digitalWrite(LED_PIN, HIGH);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(1000); // LED dan buzzer menyala lagi selama 1 detik
  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
}

void sendToBlynk() {
  Blynk.virtualWrite(V0, JUMLAH_ORANG);
  Blynk.virtualWrite(V1, SENSOR1_STATE);
  Blynk.virtualWrite(V2, SENSOR2_STATE);
  Blynk.virtualWrite(V3, cm1);
  Blynk.virtualWrite(V4, cm2);
}

void sendToFirebase() {
  if (Firebase.RTDB.setInt(&fbdo, "/jumlah_orang", JUMLAH_ORANG)) {
    Serial.println("Data berhasil dikirim ke Firebase.");
  } else {
    Serial.printf("Gagal mengirim data: %s\n", fbdo.errorReason().c_str());
  }
}
